{\rtf1\ansi\ansicpg1252
{\fonttbl
{\f1\fnil\fcharset0\fprq0 Times New Roman;}
{\f2\fnil\fcharset0\fprq0 Arial;}
{\f3\fnil\fcharset0\fprq0 Courier New;}
}
{\colortbl;
\red0\green0\blue0;
\red0\green0\blue255;
}
{\stylesheet
{\s1\li540\fi-540\kerning24\fs64\lang1033\level1 heading 1;}
{\s2\li1170\fi-450\kerning24\fs56\lang1033\level2 heading 2;}
{\s3\li1800\fi-360\kerning24\fs48\lang1033\level3 heading 3;}
{\s4\li2520\fi-360\kerning24\fs40\lang1033\level4 heading 4;}
{\s5\li3240\fi-360\kerning24\fs40\lang1033\level5 heading 5;}
{\s6\li3960\fi-360\kerning24\lang1033\level6 heading 6;}
{\s7\li4680\fi-360\kerning24\lang1033\level7 heading 7;}
{\s8\li5400\fi-360\kerning24\lang1033\level8 heading 8;}
{\s9\li6120\fi-360\kerning24\lang1033\level9 heading 9;}
}
\pard\plain\ltrpar\s1\li540\fi-540\kerning24\fs64\lang1033\li0\fi0\qc {\loch\f1\fs88\cf1 Input and Output\par 
}\pard\plain\ltrpar\s2\li1170\fi-450\kerning24\fs56\lang1033\li0\fi0\qc {\loch\f1\fs64\cf1 \'a9 2005 Devendra Tewari\par 
}\pard\plain\ltrpar\s1\li540\fi-540\kerning24\fs64\lang1033\li0\fi0\qc {\loch\f1\fs88\cf1 Introduction\par 
}\pard\plain\ltrpar\s2\li1170\fi-450\kerning24\fs56\lang1033\li540\fi-540 {\pntext\pard\plain\loch\f1\fs56 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs56{\pntxtb \'95}}{\loch\f1\cf1 Input and Output in C is provided by several standard library functions and not by the core language itself\par 
}\pard\plain\ltrpar\s2\li1170\fi-450\kerning24\fs56\lang1033\li540\fi-540 {\pntext\pard\plain\loch\f1\fs56 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs56{\pntxtb \'95}}{\loch\f1\cf1 The standard library functions operate on streams (source or destination of data)\par 
}\pard\plain\ltrpar\s2\li1170\fi-450\kerning24\fs56\lang1033\li540\fi-540 {\pntext\pard\plain\loch\f1\fs56 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs56{\pntxtb \'95}}{\loch\f1\cf1 The state of a stream is stored in the }{\loch\f3\cf1 FILE}{\loch\f1\cf1  structure declared in }{\loch\f3\cf1 <stdio.h>\par 
}\pard\plain\ltrpar\s2\li1170\fi-450\kerning24\fs56\lang1033\li540\fi-540 {\pntext\pard\plain\loch\f1\fs56 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs56{\pntxtb \'95}}{\loch\f1\cf1 A }{\loch\f3\cf1 FILE}{\loch\f1\cf1  structure variable should not be created by the programmer\par 
}\pard\plain\ltrpar\s1\li540\fi-540\kerning24\fs64\lang1033\li0\fi0\qc {\loch\f1\fs88\cf1 Standard streams\par 
}\pard\plain\ltrpar\s2\li1170\fi-450\kerning24\fs56\lang1033\li540\fi-540 {\pntext\pard\plain\loch\f1\fs64 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs64{\pntxtb \'95}}{\loch\f1\fs64\cf1 The C library provides three standard streams in }{\loch\f3\fs64\cf1 <stdio.h>}{\loch\f1\fs64\cf1 \par 
}\pard\plain\ltrpar\s3\li1800\fi-360\kerning24\fs48\lang1033\li1170\fi-450 {\pntext\pard\plain\loch\f1\fs56 \'96\tab}{\*\pn\pnlvlblt\pnf1\pnfs56{\pntxtb \'96}}{\loch\f1\fs56\cf1 Standard input \'96 }{\loch\f3\fs56\cf1 stdin}{\loch\f1\fs56\cf1  \par 
}\pard\plain\ltrpar\s3\li1800\fi-360\kerning24\fs48\lang1033\li1170\fi-450 {\pntext\pard\plain\loch\f1\fs56 \'96\tab}{\*\pn\pnlvlblt\pnf1\pnfs56{\pntxtb \'96}}{\loch\f1\fs56\cf1 Standard output \'96 }{\loch\f3\fs56\cf1 stdout}{\loch\f1\fs56\cf1  \par 
}\pard\plain\ltrpar\s3\li1800\fi-360\kerning24\fs48\lang1033\li1170\fi-450 {\pntext\pard\plain\loch\f1\fs56 \'96\tab}{\*\pn\pnlvlblt\pnf1\pnfs56{\pntxtb \'96}}{\loch\f1\fs56\cf1 Standard error \'96 }{\loch\f3\fs56\cf1 stderr}{\loch\f1\fs56\cf1  \par 
}\pard\plain\ltrpar\s1\li540\fi-540\kerning24\fs64\lang1033\li0\fi0\qc {\loch\f1\fs88\cf1 Standard Input\par 
}\pard\plain\ltrpar\s2\li1170\fi-450\kerning24\fs56\lang1033\li540\fi-540 {\pntext\pard\plain\loch\f1\fs56 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs56{\pntxtb \'95}}{\loch\f1\cf1 Stream that represents the standard input, usually this is the keyboard\par 
}\pard\plain\ltrpar\s2\li1170\fi-450\kerning24\fs56\lang1033\li540\fi-540 {\pntext\pard\plain\loch\f1\fs56 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs56{\pntxtb \'95}}{\loch\f1\cf1 The }{\loch\f3\cf1 stdin}{\loch\f1\cf1  object is the standard input stream, it can be redirected by using the }{\loch\f3\cf1 freopen}{\loch\f1\cf1  function\par 
}\pard\plain\ltrpar\s2\li1170\fi-450\kerning24\fs56\lang1033\li540\fi-540 {\pntext\pard\plain\loch\f1\fs56 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs56{\pntxtb \'95}}{\loch\f1\cf1 It can also be redirected at the command line\par 
}\pard\plain\ltrpar\s3\li1800\fi-360\kerning24\fs48\lang1033\li1170\fi-450 {\loch\f3\cf1 executable < filename\par 
}\pard\plain\ltrpar\s4\li2520\fi-360\kerning24\fs40\lang1033\li1800 {\loch\f1\cf1 content of }{\loch\f3\cf1 filename}{\loch\f1\cf1  available in }{\loch\f3\cf1 stdin}{\loch\f1\cf1  of }{\loch\f3\cf1 program\par 
}\pard\plain\ltrpar\s3\li1800\fi-360\kerning24\fs48\lang1033\li1170\fi-450 {\loch\f3\cf1 executable1 | executable2\par 
}\pard\plain\ltrpar\s4\li2520\fi-360\kerning24\fs40\lang1033\li1800 {\loch\f1\cf1 output of }{\loch\f3\cf1 executable1}{\loch\f1\cf1  available in }{\loch\f3\cf1 stdin}{\loch\f1\cf1  of }{\loch\f3\cf1 executable2\par 
}\pard\plain\ltrpar\s1\li540\fi-540\kerning24\fs64\lang1033\li0\fi0\qc {\loch\f1\fs88\cf1 Standard Output\par 
}\pard\plain\ltrpar\s2\li1170\fi-450\kerning24\fs56\lang1033\li540\fi-540 {\pntext\pard\plain\loch\f1\fs56 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs56{\pntxtb \'95}}{\loch\f1\cf1 Stream that represents the standard output, usually this is the display\par 
}\pard\plain\ltrpar\s2\li1170\fi-450\kerning24\fs56\lang1033\li540\fi-540 {\pntext\pard\plain\loch\f1\fs56 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs56{\pntxtb \'95}}{\loch\f1\cf1 The }{\loch\f3\cf1 stdout}{\loch\f1\cf1  object is the standard output stream, it can be redirected using the }{\loch\f3\cf1 freopen}{\loch\f1\cf1  function\par 
}\pard\plain\ltrpar\s2\li1170\fi-450\kerning24\fs56\lang1033\li540\fi-540 {\pntext\pard\plain\loch\f1\fs56 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs56{\pntxtb \'95}}{\loch\f1\cf1 It can also be redirected at the command line\par 
}\pard\plain\ltrpar\s3\li1800\fi-360\kerning24\fs48\lang1033\li1170\fi-450 {\loch\f3\cf1 executable > filename\par 
}\pard\plain\ltrpar\s4\li2520\fi-360\kerning24\fs40\lang1033\li1800 {\loch\f1\cf1 redirects }{\loch\f3\cf1 stdout}{\loch\f1\cf1  of program to file filename\par 
}\pard\plain\ltrpar\s3\li1800\fi-360\kerning24\fs48\lang1033\li1170\fi-450 {\loch\f3\cf1 executable1 | executable2\par 
}\pard\plain\ltrpar\s4\li2520\fi-360\kerning24\fs40\lang1033\li1800 {\loch\f1\cf1 redirects }{\loch\f3\cf1 stdout}{\loch\f1\cf1  of }{\loch\f3\cf1 executable1}{\loch\f1\cf1  to }{\loch\f3\cf1 stdin}{\loch\f1\cf1  of }{\loch\f3\cf1 executable2\par 
}\pard\plain\ltrpar\s1\li540\fi-540\kerning24\fs64\lang1033\li0\fi0\qc {\loch\f1\fs88\cf1 Standard Error\par 
}\pard\plain\ltrpar\s2\li1170\fi-450\kerning24\fs56\lang1033\li540\fi-540 {\pntext\pard\plain\loch\f1\fs56 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs56{\pntxtb \'95}}{\loch\f1\cf1 Stream that represents the standard error, usually this is the display\par 
}\pard\plain\ltrpar\s2\li1170\fi-450\kerning24\fs56\lang1033\li540\fi-540 {\pntext\pard\plain\loch\f1\fs56 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs56{\pntxtb \'95}}{\loch\f1\cf1 The }{\loch\f3\cf1 stdout}{\loch\f1\cf1  object is the standard output stream, it can be redirected using the }{\loch\f3\cf1 freopen}{\loch\f1\cf1  function\par 
}\pard\plain\ltrpar\s2\li1170\fi-450\kerning24\fs56\lang1033\li540\fi-540 {\pntext\pard\plain\loch\f1\fs56 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs56{\pntxtb \'95}}{\loch\f1\cf1 Program errors should be sent to this stream, this way when the standard output is redirected to some other file, the error messages will continue to appear to the user on the display\par 
}\pard\plain\ltrpar\s2\li1170\fi-450\kerning24\fs56\lang1033\li540\fi-540 {\pntext\pard\plain\loch\f1\fs56 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs56{\pntxtb \'95}}{\loch\f1\cf1 It can also be redirected at the command line\par 
}\pard\plain\ltrpar\s3\li1800\fi-360\kerning24\fs48\lang1033\li1170\fi-450 {\loch\f3\cf1 executable 2> filename\par 
}\pard\plain\ltrpar\s2\li1170\fi-450\kerning24\fs56\lang1033\li540\fi-540 {\loch\f1\cf1 \par 
}\pard\plain\ltrpar\s1\li540\fi-540\kerning24\fs64\lang1033\li0\fi0\qc {\loch\f1\fs88\cf1 File Access\par 
}\pard\plain\ltrpar\s2\li1170\fi-450\kerning24\fs56\lang1033\li540\fi-540 {\pntext\pard\plain\loch\f1\fs56 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs56{\pntxtb \'95}}{\loch\f1\cf1 Open a file stream\par 
}\pard\plain\ltrpar\s3\li1800\fi-360\kerning24\fs48\lang1033\li1170\fi-450 {\loch\f3\cf1 FILE *fp;\par 
}\pard\plain\ltrpar\s3\li1800\fi-360\kerning24\fs48\lang1033\li1170\fi-450 {\loch\f3\cf1 fp = fopen(name, mode);\par 
}\pard\plain\ltrpar\s3\li1800\fi-360\kerning24\fs48\lang1033\li1170\fi-450 {\pntext\pard\plain\loch\f1\fs48 \'96\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'96}}{\loch\f1\cf1  }{\loch\f3\cf1 name}{\loch\f1\cf1  is a relative or absolute file name and path\par 
}\pard\plain\ltrpar\s3\li1800\fi-360\kerning24\fs48\lang1033\li1170\fi-450 {\pntext\pard\plain\loch\f1\fs48 \'96\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'96}}{\loch\f1\cf1  }{\loch\f3\cf1 mode}{\loch\f1\cf1  can be }{\loch\f3\cf1 "r"}{\loch\f1\cf1 , }{\loch\f3\cf1 "w"}{\loch\f1\cf1 , }{\loch\f3\cf1 "a"}{\loch\f1\cf1 , }{\loch\f3\cf1 "rt"}{\loch\f1\cf1 , }{\loch\f3\cf1 "wt"}{\loch\f1\cf1 , }{\loch\f3\cf1 "at"}{\loch\f1\cf1 , }{\loch\f3\cf1 "rb"}{\loch\f1\cf1 , }{\loch\f3\cf1 "wb"}{\loch\f1\cf1 , }{\loch\f3\cf1 "ab"}{\loch\f1\cf1 , }{\loch\f3\cf1 "r+t"}{\loch\f1\cf1 , }{\loch\f3\cf1 "w+t"}{\loch\f1\cf1 , }{\loch\f3\cf1 "a+t"}{\loch\f1\cf1 , }{\loch\f3\cf1 "r+b"}{\loch\f1\cf1 , }{\loch\f3\cf1 "w+b"}{\loch\f1\cf1  and }{\loch\f3\cf1 "a+b"\par 
}\pard\plain\ltrpar\s2\li1170\fi-450\kerning24\fs56\lang1033\li540\fi-540 {\pntext\pard\plain\loch\f1\fs56 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs56{\pntxtb \'95}}{\loch\f1\cf1 Use the functions in }{\loch\f3\cf1 <stdio.h>}{\loch\f1\cf1  to manipulate the content of the file stream\par 
}\pard\plain\ltrpar\s2\li1170\fi-450\kerning24\fs56\lang1033\li540\fi-540 {\pntext\pard\plain\loch\f1\fs56 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs56{\pntxtb \'95}}{\loch\f1\cf1 Call }{\loch\f3\cf1 fclose}{\loch\f1\cf1  to close the file stream\par 
}\pard\plain\ltrpar\s1\li540\fi-540\kerning24\fs64\lang1033\li0\fi0\qc {\loch\f1\fs88\cf1 Formatted Output\par 
}\pard\plain\ltrpar\s2\li1170\fi-450\kerning24\fs56\lang1033\li540\fi-540 {\pntext\pard\plain\loch\f1\fs56 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs56{\pntxtb \'95}}{\loch\f1\cf1 Function printf prints text to stdout\par 
}\pard\plain\ltrpar\s3\li1800\fi-360\kerning24\fs48\lang1033\li1170\fi-450 {\loch\f3\cf1 int printf(char *format, \'85)\par 
}\pard\plain\ltrpar\s2\li1170\fi-450\kerning24\fs56\lang1033\li540\fi-540 {\pntext\pard\plain\loch\f1\fs56 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs56{\pntxtb \'95}}{\loch\f1\cf1 Function fprintf prints to any open stream\par 
}\pard\plain\ltrpar\s3\li1800\fi-360\kerning24\fs48\lang1033\li1170\fi-450 {\loch\f3\cf1 int fprintf(FILE *fp, char *format, \'85)\par 
}\pard\plain\ltrpar\s2\li1170\fi-450\kerning24\fs56\lang1033\li540\fi-540 {\pntext\pard\plain\loch\f1\fs56 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs56{\pntxtb \'95}}{\loch\f1\cf1  }{\loch\f3\cf1 format}{\loch\f1\cf1  is the format string, this contains the text to be printed, interspersed with conversion specifications that are used to convert and print the following arguments\par 
}\pard\plain\ltrpar\s1\li540\fi-540\kerning24\fs64\lang1033\li0\fi0\qc {\loch\f1\fs88\cf1 Print conversion specification\par 
}\pard\plain\ltrpar\s2\li1170\fi-450\kerning24\fs56\lang1033\li540\fi-540 {\loch\f1\fs64\cf1 %[flags][width][.precision][modifiers]type\par 
}\pard\plain\ltrpar\s3\li1800\fi-360\kerning24\fs48\lang1033\li1170\fi-450 {\pntext\pard\plain\loch\f1\fs56 \'96\tab}{\*\pn\pnlvlblt\pnf1\pnfs56{\pntxtb \'96}}{\loch\f1\fs56\cf1 flags can be -, +, space, 0, #\par 
}\pard\plain\ltrpar\s3\li1800\fi-360\kerning24\fs48\lang1033\li1170\fi-450 {\pntext\pard\plain\loch\f1\fs56 \'96\tab}{\*\pn\pnlvlblt\pnf1\pnfs56{\pntxtb \'96}}{\loch\f1\fs56\cf1 width specifies the minimum field width\par 
}\pard\plain\ltrpar\s3\li1800\fi-360\kerning24\fs48\lang1033\li1170\fi-450 {\pntext\pard\plain\loch\f1\fs56 \'96\tab}{\*\pn\pnlvlblt\pnf1\pnfs56{\pntxtb \'96}}{\loch\f1\fs56\cf1 precision specifies different things depending on the type\par 
}\pard\plain\ltrpar\s3\li1800\fi-360\kerning24\fs48\lang1033\li1170\fi-450 {\pntext\pard\plain\loch\f1\fs56 \'96\tab}{\*\pn\pnlvlblt\pnf1\pnfs56{\pntxtb \'96}}{\loch\f1\fs56\cf1 modifiers can be h, l or L\par 
}\pard\plain\ltrpar\s3\li1800\fi-360\kerning24\fs48\lang1033\li1170\fi-450 {\pntext\pard\plain\loch\f1\fs56 \'96\tab}{\*\pn\pnlvlblt\pnf1\pnfs56{\pntxtb \'96}}{\loch\f1\fs56\cf1 type can be d, i, o, x, X, u, c, s, f, e, E, g, G, p, n and %\par 
}\pard\plain\ltrpar\s1\li540\fi-540\kerning24\fs64\lang1033\li0\fi0\qc {\loch\f1\fs88\cf1 Formatted Input\par 
}\pard\plain\ltrpar\s2\li1170\fi-450\kerning24\fs56\lang1033\li540\fi-540 {\pntext\pard\plain\loch\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\loch\f1\fs48\cf1 Function scanf reads formatted input from stdin\par 
}\pard\plain\ltrpar\s3\li1800\fi-360\kerning24\fs48\lang1033\li1170\fi-450 {\loch\f3\fs40\cf1 int scanf(char *format, ...)\par 
}\pard\plain\ltrpar\s2\li1170\fi-450\kerning24\fs56\lang1033\li540\fi-540 {\pntext\pard\plain\loch\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\loch\f1\fs48\cf1 Function fscanf reads formatted input from any stream \par 
}\pard\plain\ltrpar\s3\li1800\fi-360\kerning24\fs48\lang1033\li1170\fi-450 {\loch\f3\fs40\cf1 int fscanf(FILE *fp; char *format, ...)\par 
}\pard\plain\ltrpar\s2\li1170\fi-450\kerning24\fs56\lang1033\li540\fi-540 {\pntext\pard\plain\loch\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\loch\f1\fs48\cf1  }{\loch\f3\fs48\cf1 format}{\loch\f1\fs48\cf1  is the format string, this contains the text to be matched against the input, interspersed with conversion specifications that are used to convert and read values into the following arguments\par 
}\pard\plain\ltrpar\s2\li1170\fi-450\kerning24\fs56\lang1033\li540\fi-540 {\pntext\pard\plain\loch\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\loch\f1\fs48\cf1 Blanks and tabs in the format string are ignored\par 
}\pard\plain\ltrpar\s2\li1170\fi-450\kerning24\fs56\lang1033\li540\fi-540 {\pntext\pard\plain\loch\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\loch\f1\fs48\cf1 White-space characters in the input stream act as field separators\par 
}\pard\plain\ltrpar\s1\li540\fi-540\kerning24\fs64\lang1033\li0\fi0\qc {\loch\f1\fs88\cf1 Input conversion specification\par 
}\pard\plain\ltrpar\s2\li1170\fi-450\kerning24\fs56\lang1033\li540\fi-540 {\loch\f1\fs64\cf1 %[*][width][modifiers]type\par 
}\pard\plain\ltrpar\s3\li1800\fi-360\kerning24\fs48\lang1033\li1170\fi-450 {\pntext\pard\plain\loch\f1\fs56 \'96\tab}{\*\pn\pnlvlblt\pnf1\pnfs56{\pntxtb \'96}}{\loch\f1\fs56\cf1 * specifies assignment suppression\par 
}\pard\plain\ltrpar\s3\li1800\fi-360\kerning24\fs48\lang1033\li1170\fi-450 {\pntext\pard\plain\loch\f1\fs56 \'96\tab}{\*\pn\pnlvlblt\pnf1\pnfs56{\pntxtb \'96}}{\loch\f1\fs56\cf1 width specifies the maximum width\par 
}\pard\plain\ltrpar\s3\li1800\fi-360\kerning24\fs48\lang1033\li1170\fi-450 {\pntext\pard\plain\loch\f1\fs56 \'96\tab}{\*\pn\pnlvlblt\pnf1\pnfs56{\pntxtb \'96}}{\loch\f1\fs56\cf1 modifiers can be h or l\par 
}\pard\plain\ltrpar\s3\li1800\fi-360\kerning24\fs48\lang1033\li1170\fi-450 {\pntext\pard\plain\loch\f1\fs56 \'96\tab}{\*\pn\pnlvlblt\pnf1\pnfs56{\pntxtb \'96}}{\loch\f1\fs56\cf1 type can be d, i, o, u, x, c, s, e, f, g, p, n, [\'85], [^\'85] and %\par 
}\pard\plain\ltrpar\s2\li1170\fi-450\kerning24\fs56\lang1033\li540\fi-540 {\loch\f1\fs64\cf1 \par 
}\pard\plain\ltrpar\s3\li1800\fi-360\kerning24\fs48\lang1033\li1170\fi-450 {\loch\f3\fs40\cf1 scanf("%d/%d/%d", &day, &month, &year)\par 
}\pard\plain\ltrpar\s2\li1170\fi-450\kerning24\fs56\lang1033\li540\fi-540 {\loch\f1\fs48\cf1 \par 
}\pard\plain\ltrpar\s1\li540\fi-540\kerning24\fs64\lang1033\li0\fi0\qc {\loch\f1\fs88\cf1 Variable length argument lists\par 
}\pard\plain\ltrpar\s2\li1170\fi-450\kerning24\fs56\lang1033\li540\fi-540 {\pntext\pard\plain\loch\f1\fs56 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs56{\pntxtb \'95}}{\loch\f1\cf1 A function may contain a variable length argument list\par 
}\pard\plain\ltrpar\s3\li1800\fi-360\kerning24\fs48\lang1033\li1170\fi-450 {\loch\f3\cf1 int printf(const char*, ...)\par 
}\pard\plain\ltrpar\s2\li1170\fi-450\kerning24\fs56\lang1033\li540\fi-540 {\pntext\pard\plain\loch\f1\fs56 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs56{\pntxtb \'95}}{\loch\f1\cf1 Header }{\loch\f3\cf1 <stdarg.h>}{\loch\f1\cf1  contains macro definitions that define how to read the argument list\par 
}\pard\plain\ltrpar\s3\li1800\fi-360\kerning24\fs48\lang1033\li1170\fi-450 {\pntext\pard\plain\loch\f1\fs48 \'96\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'96}}{\loch\f1\cf1 Declare a variable }{\loch\f3\cf1 ap}{\loch\f1\cf1  (say) of type }{\loch\f3\cf1 va_list\par 
}\pard\plain\ltrpar\s3\li1800\fi-360\kerning24\fs48\lang1033\li1170\fi-450 {\pntext\pard\plain\loch\f1\fs48 \'96\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'96}}{\loch\f1\cf1 Call }{\loch\f3\cf1 va_start(ap, lastarg)}{\loch\f1\cf1  to initialize }{\loch\f3\cf1 ap}{\loch\f1\cf1  (}{\loch\f3\cf1 lastarg}{\loch\f1\cf1  is the last argument before \'85)}{\loch\f3\cf1 \par 
}\pard\plain\ltrpar\s3\li1800\fi-360\kerning24\fs48\lang1033\li1170\fi-450 {\pntext\pard\plain\loch\f1\fs48 \'96\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'96}}{\loch\f1\cf1 Call }{\loch\f3\cf1 va_arg(ap, type)}{\loch\f1\cf1  to read next argument\par 
}\pard\plain\ltrpar\s3\li1800\fi-360\kerning24\fs48\lang1033\li1170\fi-450 {\pntext\pard\plain\loch\f1\fs48 \'96\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'96}}{\loch\f1\cf1 Call }{\loch\f3\cf1 va_end(ap)}{\loch\f1\cf1  to clean up\par 
}\pard\plain\ltrpar\s1\li540\fi-540\kerning24\fs64\lang1033\li0\fi0\qc {\loch\f1\fs88\cf1 Character input and output\par 
}\pard\plain\ltrpar\s2\li1170\fi-450\kerning24\fs56\lang1033\li540\fi-540 {\loch\f3\cf1 int getc (FILE *fp)\par 
}\pard\plain\ltrpar\s3\li1800\fi-360\kerning24\fs48\lang1033\li1170\fi-450 {\pntext\pard\plain\loch\f1\fs48 \'96\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'96}}{\loch\f1\cf1 returns next character from stream fp or EOF\par 
}\pard\plain\ltrpar\s2\li1170\fi-450\kerning24\fs56\lang1033\li540\fi-540 {\loch\f3\cf1 int putc(int c, FILE *fp)\par 
}\pard\plain\ltrpar\s3\li1800\fi-360\kerning24\fs48\lang1033\li1170\fi-450 {\pntext\pard\plain\loch\f1\fs48 \'96\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'96}}{\loch\f1\cf1 write character c to stream fp, returns character written or EOF on error\par 
}\pard\plain\ltrpar\s2\li1170\fi-450\kerning24\fs56\lang1033\li540\fi-540 {\loch\f3\cf1 getchar()\par 
}\pard\plain\ltrpar\s3\li1800\fi-360\kerning24\fs48\lang1033\li1170\fi-450 {\pntext\pard\plain\loch\f1\fs48 \'96\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'96}}{\loch\f1\cf1 same as getc(stdin)\par 
}\pard\plain\ltrpar\s2\li1170\fi-450\kerning24\fs56\lang1033\li540\fi-540 {\loch\f3\cf1 putchar(c)\par 
}\pard\plain\ltrpar\s3\li1800\fi-360\kerning24\fs48\lang1033\li1170\fi-450 {\pntext\pard\plain\loch\f1\fs48 \'96\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'96}}{\loch\f1\cf1 same as putc(c, stdout)\par 
}\pard\plain\ltrpar\s2\li1170\fi-450\kerning24\fs56\lang1033\li540\fi-540 {\loch\f1\cf1 \par 
}\pard\plain\ltrpar\s1\li540\fi-540\kerning24\fs64\lang1033\li0\fi0\qc {\loch\f1\fs88\cf1 Line input and output\par 
}\pard\plain\ltrpar\s2\li1170\fi-450\kerning24\fs56\lang1033\li540\fi-540 {\loch\f3\cf1 char * fgets(char *line, int maxline, FILE *fp)\par 
}\pard\plain\ltrpar\s3\li1800\fi-360\kerning24\fs48\lang1033\li1170\fi-450 {\pntext\pard\plain\loch\f1\fs56 \'96\tab}{\*\pn\pnlvlblt\pnf1\pnfs56{\pntxtb \'96}}{\loch\f1\fs56\cf1 reads at most }{\loch\f3\fs56\cf1 maxline - 1}{\loch\f1\fs56\cf1  characters from file stream }{\loch\f3\fs56\cf1 fp}{\loch\f1\fs56\cf1  and returns line or }{\loch\f3\fs56\cf1 NULL}{\loch\f1\fs56\cf1  on error or end of file\par 
}\pard\plain\ltrpar\s2\li1170\fi-450\kerning24\fs56\lang1033\li540\fi-540 {\loch\f3\cf1 int fputs(char *line, FILE *fp)\par 
}\pard\plain\ltrpar\s3\li1800\fi-360\kerning24\fs48\lang1033\li1170\fi-450 {\pntext\pard\plain\loch\f1\fs56 \'96\tab}{\*\pn\pnlvlblt\pnf1\pnfs56{\pntxtb \'96}}{\loch\f1\fs56\cf1 writes the string in line to the file stream }{\loch\f3\fs56\cf1 fp\par 
}\pard\plain\ltrpar\s3\li1800\fi-360\kerning24\fs48\lang1033\li1170\fi-450 {\pntext\pard\plain\loch\f1\fs56 \'96\tab}{\*\pn\pnlvlblt\pnf1\pnfs56{\pntxtb \'96}}{\loch\f1\fs56\cf1 returns zero or EOF if an error occurs\par 
}\pard\plain\ltrpar\s1\li540\fi-540\kerning24\fs64\lang1033\li0\fi0\qc {\loch\f1\fs88\cf1 File positioning\par 
}\pard\plain\ltrpar\s2\li1170\fi-450\kerning24\fs56\lang1033\li540\fi-540 {\loch\f3\fs40\cf1 fseek(FILE *stream, long offset, int origin)\par 
}\pard\plain\ltrpar\s3\li1800\fi-360\kerning24\fs48\lang1033\li1170\fi-450 {\pntext\pard\plain\loch\f1\fs48 \'96\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'96}}{\loch\f1\cf1 sets the file position for the stream}{\loch\f1\fs40\cf1 \par 
}\pard\plain\ltrpar\s3\li1800\fi-360\kerning24\fs48\lang1033\li1170\fi-450 {\pntext\pard\plain\loch\f1\fs48 \'96\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'96}}{\loch\f1\cf1  }{\loch\f3\cf1 offset}{\loch\f1\cf1  may be }{\loch\f3\cf1 SEEK_SET}{\loch\f1\cf1 , }{\loch\f3\cf1 SEEK_CUR}{\loch\f1\cf1  or }{\loch\f3\cf1 SEEK_END\par 
}\pard\plain\ltrpar\s2\li1170\fi-450\kerning24\fs56\lang1033\li540\fi-540 {\loch\f3\fs40\cf1 long ftell(FILE *stream)}{\loch\f1\fs40\cf1 \par 
}\pard\plain\ltrpar\s3\li1800\fi-360\kerning24\fs48\lang1033\li1170\fi-450 {\pntext\pard\plain\loch\f1\fs48 \'96\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'96}}{\loch\f1\cf1 returns the current file position or }{\loch\f3\cf1 -1L}{\loch\f1\cf1  on error\par 
}\pard\plain\ltrpar\s2\li1170\fi-450\kerning24\fs56\lang1033\li540\fi-540 {\loch\f3\fs40\cf1 void rewind(FILE *stream)}{\loch\f1\fs40\cf1 \par 
}\pard\plain\ltrpar\s3\li1800\fi-360\kerning24\fs48\lang1033\li1170\fi-450 {\pntext\pard\plain\loch\f1\fs48 \'96\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'96}}{\loch\f1\cf1 sets the file position to the beginning, this is same as calling }{\loch\f3\cf1 fseek(fp, 0L, SEEK_SET)\par 
}\pard\plain\ltrpar\s1\li540\fi-540\kerning24\fs64\lang1033\li0\fi0\qc {\loch\f1\fs88\cf1 Error handling\par 
}\pard\plain\ltrpar\s2\li1170\fi-450\kerning24\fs56\lang1033\li540\fi-540 {\loch\f3\fs64\cf1 void clearerr(FILE *stream)\par 
}\pard\plain\ltrpar\s3\li1800\fi-360\kerning24\fs48\lang1033\li1170\fi-450 {\pntext\pard\plain\loch\f1\fs56 \'96\tab}{\*\pn\pnlvlblt\pnf1\pnfs56{\pntxtb \'96}}{\loch\f1\fs56\cf1 clears end of file and error indicators\par 
}\pard\plain\ltrpar\s2\li1170\fi-450\kerning24\fs56\lang1033\li540\fi-540 {\loch\f3\fs64\cf1 int feof(FILE *stream)\par 
}\pard\plain\ltrpar\s3\li1800\fi-360\kerning24\fs48\lang1033\li1170\fi-450 {\pntext\pard\plain\loch\f1\fs56 \'96\tab}{\*\pn\pnlvlblt\pnf1\pnfs56{\pntxtb \'96}}{\loch\f1\fs56\cf1 returns non-zero if end of file indicator is set\par 
}\pard\plain\ltrpar\s2\li1170\fi-450\kerning24\fs56\lang1033\li540\fi-540 {\loch\f3\fs64\cf1 int ferror(FILE *stream)\par 
}\pard\plain\ltrpar\s3\li1800\fi-360\kerning24\fs48\lang1033\li1170\fi-450 {\pntext\pard\plain\loch\f1\fs56 \'96\tab}{\*\pn\pnlvlblt\pnf1\pnfs56{\pntxtb \'96}}{\loch\f1\fs56\cf1 returns non-zero if error indicator is set\par 
}\pard\plain\ltrpar\s2\li1170\fi-450\kerning24\fs56\lang1033\li540\fi-540 {\loch\f3\fs64\cf1 void perror(const char*)\par 
}\pard\plain\ltrpar\s3\li1800\fi-360\kerning24\fs48\lang1033\li1170\fi-450 {\pntext\pard\plain\loch\f1\fs56 \'96\tab}{\*\pn\pnlvlblt\pnf1\pnfs56{\pntxtb \'96}}{\loch\f1\fs56\cf1 prints error message\par 
}\pard\plain\ltrpar\s1\li540\fi-540\kerning24\fs64\lang1033\li0\fi0\qc {\loch\f1\fs88\cf1 Listing directories\par 
}\pard\plain\ltrpar\s2\li1170\fi-450\kerning24\fs56\lang1033\li540\fi-540 {\pntext\pard\plain\loch\f1\fs40 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs40{\pntxtb \'95}}{\loch\f1\fs40\cf1 For BSD / Linux compatible library functions in }{\loch\f3\fs40\cf1 <dirent.h>}{\loch\f1\fs40\cf1   \par 
}\pard\plain\ltrpar\s2\li1170\fi-450\kerning24\fs56\lang1033\li540\fi-540 {\pntext\pard\plain\loch\f1\fs40 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs40{\pntxtb \'95}}{\loch\f1\fs40\cf1 File information function }{\loch\f3\fs40\cf1 stat}{\loch\f1\fs40\cf1  from }{\loch\f3\fs40\cf1 <sys/stat.h>}{\loch\f1\fs40\cf1  }{\loch\f3\fs40\cf1 \par 
}\pard\plain\ltrpar\s3\li1800\fi-360\kerning24\fs48\lang1033\li1170\fi-450 {\loch\f3\fs36\cf1 DIR * dir;\par 
}\pard\plain\ltrpar\s3\li1800\fi-360\kerning24\fs48\lang1033\li1170\fi-450 {\loch\f3\fs36\cf1 struct dirent * item;\par 
}\pard\plain\ltrpar\s3\li1800\fi-360\kerning24\fs48\lang1033\li1170\fi-450 {\loch\f3\fs36\cf1 struct stat statbuf;\par 
}\pard\plain\ltrpar\s3\li1800\fi-360\kerning24\fs48\lang1033\li1170\fi-450 {\loch\f3\fs36\cf1 dir = opendir (".");\par 
}\pard\plain\ltrpar\s3\li1800\fi-360\kerning24\fs48\lang1033\li1170\fi-450 {\loch\f3\fs36\cf1 item = readdir (dir);\par 
}\pard\plain\ltrpar\s3\li1800\fi-360\kerning24\fs48\lang1033\li1170\fi-450 {\loch\f3\fs36\cf1 while(item != NULL) \'7b\par 
}\pard\plain\ltrpar\s3\li1800\fi-360\kerning24\fs48\lang1033\li1170\fi-450 {\loch\f3\fs36\cf1     stat(item->d_name,&statbuf);\par 
}\pard\plain\ltrpar\s3\li1800\fi-360\kerning24\fs48\lang1033\li1170\fi-450 {\loch\f3\fs36\cf1     if(S_ISDIR(statbuf.st_mode)) \'7b\par 
}\pard\plain\ltrpar\s3\li1800\fi-360\kerning24\fs48\lang1033\li1170\fi-450 {\loch\f3\fs36\cf1         ...\par 
}\pard\plain\ltrpar\s3\li1800\fi-360\kerning24\fs48\lang1033\li1170\fi-450 {\loch\f3\fs36\cf1     \'7d\par 
}\pard\plain\ltrpar\s3\li1800\fi-360\kerning24\fs48\lang1033\li1170\fi-450 {\loch\f3\fs36\cf1     item = readdir (dir);\par 
}\pard\plain\ltrpar\s3\li1800\fi-360\kerning24\fs48\lang1033\li1170\fi-450 {\loch\f3\fs36\cf1 \'7d\par 
}\pard\plain\ltrpar\s2\li1170\fi-450\kerning24\fs56\lang1033\li540\fi-540 {\loch\f1\fs40\cf1 \par 
}\pard\plain\ltrpar\s1\li540\fi-540\kerning24\fs64\lang1033\li0\fi0\qc {\loch\f1\fs88\cf1 Exercise\par 
}\pard\plain\ltrpar\s2\li1170\fi-450\kerning24\fs56\lang1033\li540\fi-540 {\pntext\pard\plain\loch\f1\fs64 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs64{\pntxtb \'95}}{\loch\f1\fs64\cf1 Write a program that functions like the Unix tar command. The program should pack all files in the current directory into a single file specified whose name is specified at the command line. If the program receives the \'96u flag followed by a file name, it should unpack the content of the file to the current directory\par 
}\pard\plain\ltrpar\s3\li1800\fi-360\kerning24\fs48\lang1033\li1170\fi-450 {\loch\f1\fs56\cf1 pack [-u] filename\par 
}
}